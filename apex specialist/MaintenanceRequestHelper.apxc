public with sharing class MaintenanceRequestHelper {
    private static Boolean predicate(Case request) {
        return request.Status == 'Closed' &&
            (request.Type == 'Repair' || request.Type == 'Routine Maintenance');
    }

    //@future(callout=false)
    public static void updateWorkOrders(List<Case> cases) {
        List<Case> requests = new List<Case>();
        for (Case request : requests) {
            if (MaintenanceRequestHelper.predicate(request)) {
                requests.add(request);
            }
        }    
        List<Id> requestIds = new List<Id>();
        List<Case> checkups = new List<Case>();
        for (Case request : requests) {
            Case routineCheckup = request.clone(true, true, false, false);
            routineCheckup.Date_Reported__c = Date.today();
            routineCheckup.Type = 'Routine Maintenance';
            if (routineCheckup.Subject == null || routineCheckup.Subject == '') {
                routineCheckup.Subject = 'Routine Maintenance';
            } 
            checkups.add(routineCheckup);
            requestIds.add(request.Id);
        }

        List<AggregateResult> maintenanceCycles = [
            SELECT
                Id, MIN(Maintenance_Cycle__c) Cycle
            FROM
                Product2
            WHERE Id IN (
                SELECT
                    Equipment__c
                FROM
                    Equipment_Maintenance_Item__c
                WHERE
                    Maintenance_Request__c IN :requestIds
            )
            GROUP BY 
                Id
        ];

        Map<Id,Integer> mapCycles = new Map<Id, Integer>();
        for (AggregateResult ar : maintenanceCycles) {
            mapCycles.put((Id) ar.get('Id'), (Integer) ar.get('Cycle'));
        }

        for (Case checkup : checkups) {
            Integer cycles = mapCycles.get(checkup.Id);
            checkup.Date_Due__c = checkup.Date_Reported__c.addDays(cycles);
        }

        insert checkups;
    }        
    
}