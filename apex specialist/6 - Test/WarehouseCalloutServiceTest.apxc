@IsTest
private class WarehouseCalloutServiceTest {
	@testSetup
    public static void setup() {
        List<Product2> products = new List<Product2>();
        
        products.add(new Product2(
            Name = 'HVAC System',
            Cost__c = 5000,
            Lifespan_Months__c = 120,
            Maintenance_Cycle__c = 15,
            Current_Inventory__c = 10,
            Replacement_Part__c = true
        ));
        
        products.add(new Product2(
            Name = 'Elevator',
            Cost__c = 15000,
            Lifespan_Months__c = 240,
            Maintenance_Cycle__c = 30,
            Current_Inventory__c = 5,
            Replacement_Part__c = true
        ));
        
        products.add(new Product2(
            Name = 'Window',
            Cost__c = 300,
            Lifespan_Months__c = 60,
            Maintenance_Cycle__c = 180,
            Current_Inventory__c = 50,
            Replacement_Part__c = true
        ));
        
        // Insert the products
        insert products;
    }
    
    private static List<Product2> getEquipments() {
    	List<Product2> equipments = [
            SELECT
            	Name , Cost__c, Lifespan_Months__c, Maintenance_Cycle__c,
            	Current_Inventory__c, Replacement_Part__c
            FROM
            	Product2
        ];
        return equipments;
    }
    
    @isTest
    public static void testOne() {
        List<Product2> equipments = getEquipments();
		Integer oldEquipmentsSize = equipments.size();
        
        equipments.add(new Product2(
            Name = 'Faucet',
            Cost__c = 100,
            Lifespan_Months__c = 84,
            Maintenance_Cycle__c = 60,
            Current_Inventory__c = 100,
            Replacement_Part__c = true
        ));
        
        equipments.add(new Product2(
            Name = 'Structural Component',
            Cost__c = 20000,
            Lifespan_Months__c = 600,
            Maintenance_Cycle__c = 31,
            Current_Inventory__c = 2,
            Replacement_Part__c = true
        ));
        
        Test.setMock(HttpCalloutMock.class, new WarehouseCalloutServiceMock(equipments));
        Test.startTest();
        new WarehouseCalloutService().execute(null);
        Integer newEquipmentsSize = getEquipments().size();
        Test.stopTest();
        
        System.assert(newEquipmentsSize > oldEquipmentsSize, '');
    }

}